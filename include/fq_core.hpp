#pragma     once
#include    "stm32f1xx.h"
#include    <cmath>
#include    <array>
#include    "core_cm3.h"
// компилятор должен оптимизировать, память не должна использоваться.

constexpr auto  _F_CPU                  = 72000000u;                // частота процессора
constexpr auto  _ARR_VALUE              = 256u;
constexpr auto  _SIGNAL_FREQUENCY_MAX   = 50u;                      // максимальная частота синусоиды
constexpr auto  _SIGNAL_FREQUENCY_MIN   = 50u;                      // минимальная частота синусоиды
constexpr auto  _DISCRETIZE             = 100u;                     // дискретизация синусоиды(количество точек)
constexpr auto  _VOLTAGE_ON_PORT        = 3.3f;                     // напряжение на порту(напряжение питания)
constexpr auto  _BITNESS                = 8u;                      // разрядность таймера[~цап]
constexpr auto  _AMPLITUDE              = ((1 << 16) - 1) / 2;      // максимальное значение таймера
constexpr auto  _ADC_MAX_VALUE          = (1 << 12) - 1;            // максимальное значение в АЦП
class FreqConverter
{
    using T = uint16_t;                                         // используемый тип данных у регистра
    FreqConverter() = delete;

public:
    static inline std::array<T, _DISCRETIZE> 
        phase_A 
        {
            
            128, 136, 144, 152, 160, 167, 175, 182, 189, 196, 203, 209, 215, 221, 226, 
            231, 236, 240, 243, 247, 249, 251, 253, 254, 255, 255, 255, 254, 252, 250, 
            248, 245, 242, 238, 234, 229, 224, 218, 213, 206, 200, 193, 186, 179, 171, 
            163, 156, 148, 140, 132, 123, 115, 107, 99, 92, 84, 76, 69, 62, 55, 
            49, 42, 37, 31, 26, 21, 17, 13, 10, 7, 5, 3, 1, 0, 0, 
            0, 1, 2, 4, 6, 8, 12, 15, 19, 24, 29, 34, 40, 46, 52, 
            59, 66, 73, 80, 88, 95, 103, 111, 119, 127
            /*256
            128, 131, 134, 137, 140, 143, 146, 149, 152, 156, 159, 162, 165, 168, 171, 
            174, 176, 179, 182, 185, 188, 191, 193, 196, 199, 201, 204, 206, 209, 211, 
            213, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 235, 237, 239, 240, 
            242, 243, 244, 246, 247, 248, 249, 250, 251, 251, 252, 253, 253, 254, 254, 
            254, 255, 255, 255, 255, 255, 255, 255, 254, 254, 253, 253, 252, 252, 251, 
            250, 249, 248, 247, 246, 245, 244, 242, 241, 239, 238, 236, 235, 233, 231, 
            229, 227, 225, 223, 221, 219, 217, 215, 212, 210, 207, 205, 202, 200, 197, 
            195, 192, 189, 186, 184, 181, 178, 175, 172, 169, 166, 163, 160, 157, 154, 
            151, 148, 145, 142, 138, 135, 132, 129, 126, 123, 120, 117, 113, 110, 107, 
            104, 101, 98, 95, 92, 89, 86, 83, 80, 77, 74, 71, 69, 66, 63, 
            60, 58, 55, 53, 50, 48, 45, 43, 40, 38, 36, 34, 32, 30, 28, 
            26, 24, 22, 20, 19, 17, 16, 14, 13, 11, 10, 9, 8, 7, 6, 
            5, 4, 3, 3, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 
            1, 1, 1, 2, 2, 3, 4, 4, 5, 6, 7, 8, 9, 11, 12, 
            13, 15, 16, 18, 20, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 
            42, 44, 46, 49, 51, 54, 56, 59, 62, 64, 67, 70, 73, 76, 79, 
            81, 84, 87, 90, 93, 96, 99, 103, 106, 109, 112, 115, 118, 121, 124, 127
            */
        };
        //phase_B,
        //phase_C;
    static void timer_initialize();
    static void array_initialize();
    static void ADC_initialize();
    static void main_initialization(); // все методы инициализации вызываются здесь.
    static inline uint8_t get_frequency()
    {
        return ((ADC1->DR / static_cast<float>(_ADC_MAX_VALUE)) * _SIGNAL_FREQUENCY_MAX);
    }
};


